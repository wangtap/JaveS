<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!--加入注解扫描驱动，自动扫描注解-->
    <mvc:annotation-driven/>

    <!--配置注解扫描的基础包-->
    <context:component-scan base-package="com.ssm"/>

    <!--将静态资源的处理理经由Spring MVC框架交回Web应⽤用服务器器处理理-->
    <!--将静态资源，交由web处理SpringMVC不管 -->
    <mvc:default-servlet-handler/>

    <!--配置Spring MVC视图解析-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--访问 控制器得到结果时，这个结果就是要展示的视图名字-->
        <!--那么对于这个视图来讲，除了名字还有扩展名（什么文件）路径（找到这个文件）-->

        <!--视图路路径的前缀，这里会作为前缀，加到视图名字前面-->
        <property name="prefix" value="/WEB-INF/"/>

        <!--视图路路径的后缀，这里会当做后缀，加到视图名字后面-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 配置c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">

        <property name="driverClass" value="${db.driver}"/>
        <property name="jdbcUrl" value="${db.url}"/>
        <property name="user" value="${db.username}"/>
        <property name="password" value="${db.password}"/>

        <property name="initialPoolSize" value="${db.initialPoolSize}"/>
        <!--最大空闲时间，池中连接对象，长时间不使用则被丢弃-->
        <!--默认：0，不丢弃-->
        <property name="maxIdleTime" value="${db.maxIdleTime}"/>
        <property name="maxPoolSize" value="${db.maxPoolSize}"/>
        <property name="minPoolSize" value="${db.minPoolSize}"/>

        <!--若池中无空闲连接，则一次性增加多少连接对象-->
        <!--默认：3-->
        <property name="acquireIncrement" value="${db.acquireIncrement}"/>

        <!--两次获取连接的间隔时间-->
        <!--默认：1000毫秒-->
        <property name="acquireRetryDelay" value="${db.acquireRetryDelay}"/>

        <!--若获取连接失败，尝试多少次-->
        <!--默认：30次-->
        <property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}"/>

        <!--获取连接失败，则会引起所有正在等待连接池给予连接的线程，抛出异常-->
        <!--但是数据源扔有效保留，并在下次调用getConnection时，继续尝试获取连接-->
        <!--如果设置为true，那么在尝试获取连接失败后，会将数据源设置为已断开状态并永久关闭-->
        <!--默认：false-->
        <property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <!--mybatis的配置文件路径-->
        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>

        <!--在spring的配置文件中，为mybatis指定数据源-->
        <!--就是我们上面定义的c3p0的dataSource-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--这里和ssh时一样，配置事务管理对象-->
    <!--切面-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务属性-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*"/>
            <tx:method name="delete*"/>
            <tx:method name="update*"/>
            <tx:method name="find*"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--配置切入点-->
        <aop:pointcut id="pointcut"
                      expression="execution(* com.ssm.*.dao.*.*(..))"/>
             <!--
                  配置通知
                  就是在切入点前后要做的事情（前置通知后置通知什么的
              -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>
    <!--由spring管理原始dao-->
    <!--方式一-->
    <!--<bean id="userDao" class="com.lanou">-->
    <!--<property name="sqSessionFactory" ref="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!--方式二-->
    <!--通过mapper代理开发模式，批量进行mapper配置-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定批量mapper配置的包名（就是dao层）-->
        <property name="basePackage" value="com.ssm.user.dao"/>
        <!--指定这些dao都使用哪个SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
</beans>